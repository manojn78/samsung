#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

bool canDistribute(vector<int>& mines, int n, int maxDiff) {
    int sum = 0, minSum = INT_MAX, maxSum = INT_MIN;
    int companiesUsed = 1;
    
    for (int i = 0; i < mines.size(); i++) {
        sum += mines[i];
        
        if (sum > maxDiff) { 
            // If sum exceeds maxDiff, create a new company allocation
            minSum = min(minSum, sum - mines[i]);
            maxSum = max(maxSum, sum - mines[i]);
            sum = mines[i];
            companiesUsed++;
        }
    }
    
    // Account for last partition
    minSum = min(minSum, sum);
    maxSum = max(maxSum, sum);
    
    return companiesUsed <= n; 
}

int minFairDistribution(vector<int>& mines, int n) {
    int left = *max_element(mines.begin(), mines.end()); // Min fairness (max single oil mine value)
    int right = accumulate(mines.begin(), mines.end(), 0); // Max fairness (all mines in one company)
    int result = right;
    
    while (left <= right) {
        int mid = left + (right - left) / 2;
        
        if (canDistribute(mines, n, mid)) {
            result = mid; 
            right = mid - 1; // Try for a smaller unfairness value
        } else {
            left = mid + 1; // Increase unfairness limit
        }
    }
    
    return result;
}

int main() {
    int n, m;
    cout << "Enter number of companies (n) and oil mines (m): ";
    cin >> n >> m;
    
    vector<int> mines(m);
    cout << "Enter oil mine values: ";
    for (int i = 0; i < m; i++) {
        cin >> mines[i];
    }
    
    int minDifference = minFairDistribution(mines, n);
    cout << "Minimum possible unfairness: " << minDifference << endl;
    
    return 0;
}
