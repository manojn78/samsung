#include <iostream>
#include<unordered_map>
#include<string>
#include<stack>
#include<queue>
using namespace std;
struct Node{
    int val;
    Node* left;
    Node* right;
    Node(int x):val(x),left(NULL),right(NULL){} 
};
unordered_map<int,int> m;
Node* rec(int s,int e,string str)
{
    Node* root=new Node(str[s]-'0');
    int y=-1;
    if(s+1<=e && str[s+1]=='(')
    {
        y=m[s+1];
    }
    if(y!=-1)
    {
        root->left=rec(s+2,y-1,str);
        root->right=rec(y+2,e-1,str);
    }
    return root;
    
}
void dept_sum(Node* root,int k)
{ int l=1,sum=0;
    queue<Node*> q;
    q.push(root);
    int y=-1;
    while(!q.empty())
    {   int n=q.size();
        if(k==(++l))
        y=1;
        for(int i=0;i<n;i++)
    {
       Node* temp=q.front();
        q.pop();
        if(y==1)
        {
            if(temp->left)
            sum+=temp->left->val;
            if(temp->right)
            sum+=temp->right->val;
        }
        if(temp->left)
        q.push(temp->left);
        if(temp->right)
        q.push(temp->right);

    } 

    }
    cout<<sum;
}
int main() 
{   
    string str;
    int x;
    cin>>x;
    cin>>str;
    stack<int> s;
    for(int i=0;i<str.size();i++)
    {
        if(str[i]=='(')
        s.push(i);
        else if(str[i]==')')
        {
            int x=s.top();
            m[x]=i;
        }
    }
    int si=0;
    int e=str.size()-1;
    Node* root=rec(si,e,str);
    dept_sum(root,x);

}
