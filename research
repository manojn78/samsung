#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

struct Cell {
    int x, y;
};

vector<int> dx = {-1, 1, 0, 0}; // Directions for moving in a grid
vector<int> dy = {0, 0, -1, 1};

void bfs(vector<vector<int>> &grid, vector<vector<int>> &dist, queue<Cell> &q) {
    int n = grid.size();
    while (!q.empty()) {
        Cell cur = q.front();
        q.pop();
        
        for (int i = 0; i < 4; i++) {
            int nx = cur.x + dx[i];
            int ny = cur.y + dy[i];
            
            if (nx >= 0 && ny >= 0 && nx < n && ny < n && grid[nx][ny] == 1) {
                if (dist[nx][ny] > dist[cur.x][cur.y] + 1) {
                    dist[nx][ny] = dist[cur.x][cur.y] + 1;
                    q.push({nx, ny});
                }
            }
        }
    }
}

int findBestResearchCenter(vector<vector<int>> &grid, vector<Cell> &rareElements) {
    int n = grid.size();
    vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
    queue<Cell> q;
    
    // Initialize BFS from all rare element locations
    for (auto &cell : rareElements) {
        dist[cell.x][cell.y] = 0;
        q.push(cell);
    }
    
    // Run BFS to compute shortest distances
    bfs(grid, dist, q);
    
    int bestLocation = INT_MAX;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == 1) {
                int maxDist = 0;
                for (auto &cell : rareElements) {
                    maxDist = max(maxDist, dist[i][j]);
                }
                bestLocation = min(bestLocation, maxDist);
            }
        }
    }
    return bestLocation;
}

int main() {
    int n;
    cin >> n;
    vector<vector<int>> grid(n, vector<int>(n));
    vector<Cell> rareElements;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> grid[i][j];
            if (grid[i][j] == 2) { // Marking rare elements
                rareElements.push_back({i, j});
                grid[i][j] = 1; // Convert rare-element cells into roads
            }
        }
    }
    
    cout << "Optimal research center location distance: " << findBestResearchCenter(grid, rareElements) << endl;
    return 0;
}
