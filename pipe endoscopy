#include <iostream>
#include <queue>
using namespace std;

struct Node {
    bool left, right, up, down;
};

struct Point {
    int x, y;
};

int n, m, sX, sY, len;
int arr[1005][1005], vis[1005][1005];
Node pipes[1005][1005];
int result;

bool isValid(int i, int j) {
    return (i >= 0 && i < n && j >= 0 && j < m);
}

void bfs() {
    queue<Point> q;
    result = 1;
    int level = 1;  // Start from level 1 (considering source itself is visited)

    if (arr[sX][sY] == 0) {
        result = 0;
        return;
    }

    q.push({sX, sY});
    vis[sX][sY] = 1;

    while (!q.empty() && level < len) {
        int size = q.size();  // Number of nodes at current level

        for (int i = 0; i < size; i++) {
            Point curr = q.front();
            q.pop();

            int p = curr.x, qy = curr.y;

            // Move Up
            if (isValid(p - 1, qy) && !vis[p - 1][qy] && pipes[p - 1][qy].down && pipes[p][qy].up) {
                vis[p - 1][qy] = 1;
                result++;
                q.push({p - 1, qy});
            }

            // Move Down
            if (isValid(p + 1, qy) && !vis[p + 1][qy] && pipes[p + 1][qy].up && pipes[p][qy].down) {
                vis[p + 1][qy] = 1;
                result++;
                q.push({p + 1, qy});
            }

            // Move Left
            if (isValid(p, qy - 1) && !vis[p][qy - 1] && pipes[p][qy - 1].right && pipes[p][qy].left) {
                vis[p][qy - 1] = 1;
                result++;
                q.push({p, qy - 1});
            }

            // Move Right
            if (isValid(p, qy + 1) && !vis[p][qy + 1] && pipes[p][qy + 1].left && pipes[p][qy].right) {
                vis[p][qy + 1] = 1;
                result++;
                q.push({p, qy + 1});
            }
        }

        level++;  // Increment level after processing all nodes at the current depth
    }
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        cin >> n >> m >> sX >> sY >> len;
        result = 1;

        // Reset visited array
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> arr[i][j];
                vis[i][j] = 0;

                // Define pipe connectivity
                pipes[i][j] = {false, false, false, false};

                if (arr[i][j] == 1) pipes[i][j] = {true, true, true, true};
                else if (arr[i][j] == 2) pipes[i][j] = {false, false, true, true};
                else if (arr[i][j] == 3) pipes[i][j] = {true, true, false, false};
                else if (arr[i][j] == 4) pipes[i][j] = {false, true, true, false};
                else if (arr[i][j] == 5) pipes[i][j] = {false, true, false, true};
                else if (arr[i][j] == 6) pipes[i][j] = {true, false, false, true};
                else if (arr[i][j] == 7) pipes[i][j] = {true, false, true, false};
            }
        }

        bfs();
        cout << result << "\n";
    }
    return 0;
}
