#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int n, sx, sy, tx, ty;
vector<vector<int>> dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}}; // Right, Left, Down, Up

void bfs(vector<vector<int>> &mat, vector<vector<int>> &vis) {
    queue<pair<pair<int, int>, int>> q; // { {x, y}, cost }
    q.push({{sx, sy}, 0});
    vis[sx][sy] = 1;
    
    int min_cost = INT_MAX;

    while (!q.empty()) {
        auto front = q.front();
        int x = front.first.first;
        int y = front.first.second;
        int cost = front.second;
        q.pop();

        if (x == tx && y == ty) {
            min_cost = min(min_cost, cost);
            continue; // We found a possible path, continue searching for a better one
        }

        // Move horizontally (0-cost movement)
        for (int i = 0; i < 2; i++) { // Only right (0,1) and left (0,-1)
            int nx = x + dir[i][0];
            int ny = y + dir[i][1];

            if (nx >= 0 && ny >= 0 && nx < n && ny < n && mat[nx][ny] == 1 && !vis[nx][ny]) {
                vis[nx][ny] = 1; // Mark visited
                q.push({{nx, ny}, cost}); // No cost increase for horizontal movement
            }
        }

        // Move vertically (adds cost)
        for (int i = 2; i < 4; i++) { // Only down (1,0) and up (-1,0)
            int nx = x + dir[i][0];
            int ny = y + dir[i][1];

            if (nx >= 0 && ny >= 0 && nx < n && ny < n && mat[nx][ny] == 1 && !vis[nx][ny]) {
                vis[nx][ny] = 1; // Mark visited
                q.push({{nx, ny}, cost + 1}); // Increase cost for vertical jump
            }
        }
    }

    // Output the minimum cost
    if (min_cost == INT_MAX) {
        cout << "-1\n"; // No path found
    } else {
        cout << min_cost << "\n";
    }
}

int main() {
    cin >> n;
    vector<vector<int>> mat(n, vector<int>(n, 0));
    vector<vector<int>> vis(n, vector<int>(n, 0));

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> mat[i][j];
        }
    }

    cin >> sx >> sy >> tx >> ty;
    bfs(mat, vis);

    return 0;
}
