#include <iostream>
#include <vector>
using namespace std;

// Recursive function to check if a subset with the given target sum exists
bool subsetSum(int ind, int target, vector<int>& a) {
    if (target == 0) return true;
    if (ind == 0) return (a[0] == target);

    bool notTake = subsetSum(ind - 1, target, a);
    bool take = false;
    
    if (target >= a[ind]) {
        take = subsetSum(ind - 1, target - a[ind], a);
    }

    return take || notTake;
}

// Function to find the largest equal partition sum
int findMaxPartitionSum(vector<int>& a) {
    int totalSum = 0;
    for (int num : a) totalSum += num;

    // We can only achieve sums up to totalSum/2 (for equal partitions)
    for (int target = totalSum / 2; target >= 0; target--) {
        if (subsetSum(a.size() - 1, target, a)) {
            return target;  // Maximum partition sum found
        }
    }

    return 0;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> a(n);
        for (int i = 0; i < n; i++) cin >> a[i];

        cout << findMaxPartitionSum(a) << endl;
    }
    return 0;
}
